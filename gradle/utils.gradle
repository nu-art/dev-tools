/*
 * This file is a part of nu-art projects development tools,
 * it has a set of bash and gradle scripts, and the default
 * settings for Android Studio and IntelliJ.
 *
 * Copyright (C) 2017  Adam van der Kruk aka TacB0sS
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


def addJavadocTask() {
    android.libraryVariants.all { variant ->
        task("generate${variant.name}Javadoc", type: Javadoc) {
            title = "Documentation for Android $android.defaultConfig.versionName b$android.defaultConfig.versionCode"
            description "Generates Javadoc for $variant.name."

            destinationDir = new File("${project.getProjectDir()}/build/doc/compiled/", variant.baseName)
            source = variant.javaCompile.source
            classpath = files(variant.javaCompile.classpath.files, project.android.getBootClasspath())

            options {
                links "http://docs.oracle.com/javase/7/docs/api/"
                linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"
            }
        }

        task("package${variant.name.capitalize()}Javadoc", type: Jar, dependsOn: "generate${variant.name}Javadoc") {
            description "Bundles Javadoc into zip for $variant.name."
            classifier = "javadoc"
            destinationDir = new File("${project.getProjectDir()}/build/doc/")
            from tasks["generate${variant.name}Javadoc"]
        }
    }

}

Object resolveDependency(String artifactId, String groupId, String version) {
    return resolveDependency(artifactId, groupId, version, null)
}

Object resolveDependency(String artifactId, String groupId, String version, String projectName) {
    projectName = projectName == null ? artifactId : projectName
    def pathToProject = projectName == null ? artifactId : projectName.replaceAll(":", "/")
    def file = new File(rootProject.projectDir.getAbsolutePath() + "/${pathToProject}", "build.gradle")
    if (file.exists())
        try {
            return project(":$projectName")
        } catch (e) {
            System.err.println("Error while resolving project: :${projectName}")
            e.printStackTrace()
            return "${groupId}:${artifactId}:${version}"
        }

    return "${groupId}:${artifactId}:${version}"
}

void includeIfExists(String artifactId) {
    if (artifactId.startsWith(":"))
        artifactId = artifactId.substring(1)

    def folder = artifactId.replaceAll(":", "/")
    def file = new File(rootProject.projectDir.getAbsolutePath() + "/${folder}", "build.gradle")
    if (!file.exists()) {
//        println "not found: ${file.getAbsolutePath()}"
        return
    }

    println "including: :${artifactId}"
    include ":${artifactId}"
}

void applyNestedSettingsIfExists(String pathToFile) {
    def file = new File(pathToFile)
    if (!file.exists()) {
        println "no path: " + pathToFile
        return
    }

    ext.settingsDir = file.getParentFile()
    println "apply from: " + pathToFile
    apply from: "${file.getAbsolutePath()}"
}

void defineVariantsAAR() {
    defineVariantsAAR({ variant -> "${archivesBaseName}-v${version}.aar" })
}

@SuppressWarnings("GrMethodMayBeStatic")
void defineVariantsAAR(Closure nameBuild) {
    android.libraryVariants.all { variant ->
        if (isGradleVersion4_1())
            variant.outputs.all { output ->
                outputFileName = nameBuild(variant)
//                println("outputFileName: " + output.outputFile.getAbsolutePath())
            }
        else
            variant.outputs.each { output ->
                output.outputFile = new File((String) output.outputFile.parent, nameBuild(variant))
            }
    }
}

void defineDefaultVariantsAPK(String appName) {
    defineDefaultVariantsAPK(null, appName)
}

String SplitCamelCaseWithAbbreviations(s) {
    def spl = s.split(/(?<=[a-z])(?=[A-Z])/)
    def out = ""
    for (def word in spl) {
        out += word[0].toUpperCase()
    }
    return out
}

void defineDefaultVariantsAPK(Object architectureFilter, String appName) {
    defineVariantsAPK(architectureFilter, { variant, output, versionName, versionCode, buildType, flavors, architecture ->
        def flavor = flavors.size() > 0 ? "-${flavors[0].name}" : ""
        def arch = architecture ? "-${architecture}" : ""
//        def buildLetter = buildType.toUpperCase().charAt(0)
        def buildLetters = SplitCamelCaseWithAbbreviations(buildType)

        "v${versionName}-${versionCode}-${buildLetters}${flavor}${arch}--${appName}.apk"
    })
}

void defineVariantsAPK(Object architectureFilter, Closure nameBuild) {
    android {
        applicationVariants.all { variant ->
            Closure apkName = { output ->
                String versionName = variant.versionName
                String versionCode = "${variant.versionCode}"
                String architecture = architectureFilter == null ? null : output.getFilter(architectureFilter)
                architecture = (architecture != null ? architecture : "")

                String fileName = nameBuild(variant, output, versionName, versionCode, variant.buildType.name, variant.productFlavors, architecture)
                return new File(isGradleVersion4_1() ? "." : (String) output.outputFile.parent, fileName)
            }

            if (isGradleVersion4_1())
                variant.outputs.all { output ->
                    outputFileName = apkName(output)
                }
            else
                variant.outputs.each { output ->
                    output.outputFile = apkName(output)
                    output.packageApplication.outputFile = output.outputFile
                }
        }
    }
}

Object _implementation(Object artifact) {
    if (isGradleVersion4_1())
        dependencies {
            implementation artifact
        }
    else
        dependencies {
            compile artifact
        }

}

Object _api(Object artifact) {
    if (isGradleVersion4_1())
        dependencies {
            api artifact
        }
    else
        dependencies {
            implementation artifact
        }

}

boolean isGradleVersion4_1() {
    return checkMinGradleVersion("4.1")
}

boolean checkMinGradleVersion(minVersion) {
    def minVersionParts = minVersion.split("\\.")

    def gradleVersion = ("" + org.gradle.util.GradleVersion.current()).substring("Gradle ".length())
    def gradleVersionParts = gradleVersion.split("\\.")
    def result = compareVersions(minVersionParts, gradleVersionParts)
//    println "comparing " + minVersionParts + " with " + gradleVersionParts + ": " + result
    return result
}

private boolean compareVersions(minVersionParts, gradleVersionParts) {
    for (int i = 0; i < minVersionParts.length; i++) {
        def min = minVersionParts[i].toInteger()
        def current = gradleVersionParts.length <= i ? 0 : gradleVersionParts[i].toInteger()

        if (min < current)
            return true

        if (min == current)
            continue

        return false
    }

    return true
}

//checkMinGradleVersion("1.2")
//checkMinGradleVersion("4.4.2")
//checkMinGradleVersion("5.0.1")
//checkMinGradleVersion("5.1")
//checkMinGradleVersion("5.1.1")
//checkMinGradleVersion("5.1.2")
//checkMinGradleVersion("5.2")

def addTasks_JavaSourceAndDocs() {
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

def addTasks_AndroidSourceAndDocs() {
    task javadoc(type: Javadoc) {
        failOnError false
        source = android.sourceSets.main.java.sourceFiles
        classpath = files(project.files(android.getBootClasspath().join(File.pathSeparator)), project.android.getBootClasspath(), configurations.compile)

        options {
            links "http://docs.oracle.com/javase/7/docs/api/"
            linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"
        }
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier "source"
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}


ext {
    checkMinGradleVersion = this.&checkMinGradleVersion
    _api = this.&_api
    _implementation = this.&_implementation
    defineDefaultVariantsAPK = this.&defineDefaultVariantsAPK
    addJavadocTask = this.&addJavadocTask
    defineVariantsAPK = this.&defineVariantsAPK
    defineVariantsAAR = this.&defineVariantsAAR
    resolveDependency = this.&resolveDependency
    includeIfExists = this.&includeIfExists
    applyNestedSettingsIfExists = this.&applyNestedSettingsIfExists
    addTasks_AndroidSourceAndDocs = this.&addTasks_AndroidSourceAndDocs
    addTasks_JavaSourceAndDocs = this.&addTasks_JavaSourceAndDocs
}
