/*
 * This file is a part of nu-art projects development tools,
 * it has a set of bash and gradle scripts, and the default
 * settings for Android Studio and IntelliJ.
 *
 * Copyright (C) 2017  Adam van der Kruk aka TacB0sS
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import java.util.regex.Pattern

def getVersionCodePattern() {
    return "versionCode\\s*(\\d+)"
}

def getVersionNamePattern() {
    return "versionName\\s*\"(.*?)\""
}

def getVersionNameFromFile() {
    return getVersionNameFromFile(true)
}

def getVersionNameFromFile(boolean withDevName) {
    String enforcedVersionName = System.getenv('ENFOURCE_VERSION_NAME')
    if (enforcedVersionName)
        return enforcedVersionName

    String versionNameFromFile = getVersionNameFromFile(pathToVersionFile)

    String developer = System.getenv('VERSION_NAME_DEVELOPER')
    if (developer && withDevName)
        developer = "-" + developer
    else
        developer = ""

    return versionNameFromFile + developer
}

def getVersionNameFromFile(String pathToFile) {
    if (pathToFile == null) {
        println("---------------------------------------------------------")
        println("---- NO PATH TO VERSION FILE... versionName == 1.0.0 ----")
        println("---------------------------------------------------------")
        return "1.0.0"
    }

    def file = file(pathToFile)
    if (!file.exists()) {
        println("VERSION FILE DOES NOT EXISTS: ${file.getAbsolutePath()} versionName == 1.0.0")
        return "1.0.0"
    }

    String versionNameFound = getPattern(file, getVersionNamePattern())
    return versionNameFound
}

def getVersionCodeFromFile() {
    getVersionCodeFromFile(null)
}

def getVersionCodeFromFile(String pathToFile) {
    String enforcedVersionCode = System.getenv('ENFOURCE_VERSION_CODE')
    if (enforcedVersionCode)
        return Integer.parseInt(enforcedVersionCode)

    if (pathToFile == null)
        pathToFile = pathToVersionFile

    if (pathToFile == null) {
        println("-----------------------------------------------------")
        println("---- NO PATH TO VERSION FILE... versionCode == 1 ----")
        println("-----------------------------------------------------")
        return 1
    }

    def file = file(pathToFile)
    if (!file.exists()) {
        println("VERSION FILE DOES NOT EXISTS: ${file.getAbsolutePath()} versionCode == 1")
        return 1
    }

    def versionCode = Integer.parseInt(getPattern(file, getVersionCodePattern()))
    return versionCode
}

def getPattern(file, regexp) {
    def versionCodePattern = Pattern.compile(regexp)
    def fileContent = file.getText()
    def matcher = versionCodePattern.matcher(fileContent)
    matcher.find()

    return matcher.group(1)
}

def incrementVersionName(int length, int index) {
    String originalVersion = getVersionNameFromFile(false)
    def originalVersionArray = originalVersion.split("\\.")
    def versionKeys = [0, 0, 0, 0]
    for (int i = 0; i < originalVersionArray.length; i++) {
        versionKeys[i] = Integer.parseInt(originalVersionArray[i])
    }
    def finalVersion = ""
    versionKeys[index]++;
    for (int i = 0; i < length; i++) {
        finalVersion += (i > index ? "0" : "" + versionKeys[i])
        if (i < length - 1)
            finalVersion += "."
    }

    println("Incrementing Version Name: " + originalVersion + " ==> " + finalVersion)

    updateVersionFile(pathToVersionFile, getVersionNamePattern(), "versionName \"" + finalVersion + "\"");
}

def incrementVersionCode() {
    def originalVersionCode = getVersionCodeFromFile()
    def finalVersionCode = originalVersionCode + 1;
    println("Incrementing Version Code: " + originalVersionCode + " ==> " + finalVersionCode)

    updateVersionFile(pathToVersionFile, getVersionCodePattern(), "versionCode " + finalVersionCode)
}

def updateVersionFile(fileName, pattern, replacement) {
    def file = file(fileName)
    def fileContent = file.getText()

    def newFileContent = fileContent.replaceAll(pattern, replacement)
    file.write(newFileContent)
}

ext {
    getVersionNameFromFile = this.&getVersionNameFromFile
    getVersionCodeFromFile = this.&getVersionCodeFromFile
    incrementVersionName = this.&incrementVersionName
    incrementVersionCode = this.&incrementVersionCode
}